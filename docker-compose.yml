version: "3.9"

services:
  db:
    image: postgres:15
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_DB: medical_db
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      # Run both schema and seed on first boot (alpha-order applies)
      - ./db/10_init.sql:/docker-entrypoint-initdb.d/10_init.sql:ro
      - ./db/20_seed.sql:/docker-entrypoint-initdb.d/20_seed.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d medical_db"]
      interval: 5s
      timeout: 3s
      retries: 30

  mcp:
    image: ghcr.io/ruslanmv/medical-mcp-toolkit:latest
    container_name: mcp
    restart: unless-stopped
    environment:
      # The server reads BEARER_TOKEN
      BEARER_TOKEN: ${MCP_BEARER_TOKEN:-dev-token}
      # Useful if/when the app connects to Postgres directly
      DATABASE_URL: ${DATABASE_URL:-postgresql://mcp_user:mcp_password@db:5432/medical_db}
      UVICORN_LOG_LEVEL: ${UVICORN_LOG_LEVEL:-info}
      MCP_LOG_LEVEL: ${MCP_LOG_LEVEL:-INFO}
    ports:
      # host:container | container listens on 8080 per your Dockerfile
      - "${MCP_PORT:-9090}:8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s

  gateway:
    build:
      context: ./gateway
    container_name: gateway
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://mcp_user:mcp_password@db:5432/medical_db
      ALLOWED_ORIGINS: http://localhost:3000
      ALLOW_CREDENTIALS: "true"
      SESSION_COOKIE_NAME: sid
      SESSION_TTL_SECONDS: 2592000
      SESSION_SECURE_COOKIES: "false"
      SESSION_SAMESITE: lax
      COOKIE_SECRET: change-me-please-32B-minimum
      # Point to MCP internal port (8080)
      MCP_BASE_URL: http://mcp:8080
      MCP_BEARER_TOKEN: ${MCP_BEARER_TOKEN:-dev-token}
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
      mcp:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE: http://localhost:${GATEWAY_PORT:-8080}
      NEXT_PUBLIC_APP_NAME: Medical AI Portal
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      gateway:
        condition: service_started

volumes:
  db_data:
